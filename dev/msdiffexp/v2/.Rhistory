modcol<-gsub("^[ ]+","",modcol)
modcol<-gsub(";[ ]+$","",modcol)
evidence[,"Modifications.only"]<-modcol
subtotals2<-ddply(evidence,c("Spectrum.File","Unique.Sequence.ID","Modifications.only"),function(x){
cond_sums<-c()
for(cond_i in conditions.labels){
cond_sums<-cbind(cond_sums, sum(x[,cond_i],na.rm=T))
}
cond_counts<-sum(!is.na(x[,conditions.labels[1]])) # It doesn't matter which label is used for counting. This is the ratio counts, and since PD replaces missing signlas with the minimum intensity, there will always be a ratio, and the number of ratios will be equal to the number of records here. Unwanted ratios, such as those that are equal to 1 and should not be considered/counted are filtered above, at the peptide-filtering stage if chosen by the user (recommended)
ret<-data.frame(cbind(cond_sums,cond_counts))
colnames(ret)<-c(conditions.labels,"Ratio.counts")
ret$Evidence.IDs<-paste(x$id,collapse=";")
ret$Sequence<-toupper(x$Sequence[1])
ret$Protein.IDs<-x$Protein.IDs[1]
return(ret)
#data.frame(Evidence.IDs=paste(x$id,collapse=";"),Light=sum(x$Light,na.rm=T),Medium=sum(x$Medium,na.rm=T),Heavy=sum(x$Heavy,na.rm=T),n.Peptides=sum(!is.na(x$Heavy)))
})
}
#write.table(file="tmp.txt",subtotals2,row.names=F,sep="\t")
levellog("Re-arranging data and assigning column names ...");
#Re-arrange data and assign column names
if(ProteinQuantitation){
melted_subtotals<-melt(subtotals2)
}else{
melted_subtotals<-melt(subtotals2,id.vars=c("Spectrum.File", "Modifications.only", "Evidence.IDs", "Sequence", "Protein.IDs", "Unique.Sequence.ID"))
}
n_bioreps<-length(which(!duplicated(rep_structure)))/nConditions
n_techreps<-length(rep_structure)/(n_bioreps*nConditions)
i_bioreps<-which(!duplicated(rep_structure))[1:n_bioreps]
melted_subtotals$Spectrum.File<-factor(melted_subtotals$Spectrum.File)
rep_desc<-paste(paste("b",rep_structure[1:(length(rep_structure)/nConditions)],sep=""),paste("t",rep(1:n_techreps),sep=""),sep="")
if(!is.na(rep_order)){
o<-unlist(lapply(rep_order,function(x)((x-1)*n_techreps+1):(((x-1)*n_techreps+1)+n_techreps-1)))
rep_desc<-rep_desc[o]
}
# For the label-free case: multiplex conditions so we have the same data format downstream, i.e. as with labelled experiments
if(LabelFree){
tmp_rep_desc<-c()
for(i in 1:nConditions){
tmp_rep_desc[[i]]<-paste("c",i,rep_desc,sep="")
levels(melted_subtotals$Spectrum.File)[which(levels(melted_subtotals$Spectrum.File) %in% paste(conditions.labels.Modifications[[i]],".raw",sep=""))]<-tmp_rep_desc[[i]]
}
rep_desc<-unlist(tmp_rep_desc)
melted_subtotals$brtr<-NA
biorep_techrep<-regmatches(levels(melted_subtotals$Spectrum.File), regexpr("b.*", levels(melted_subtotals$Spectrum.File)))
for(i in 1:length(levels(melted_subtotals$Spectrum.File))){
lvl_i<-levels(melted_subtotals$Spectrum.File)[i]
brtr<-biorep_techrep[i]
melted_subtotals[melted_subtotals$Spectrum.File == lvl_i,"brtr"]<-brtr
}
melted_subtotals$brtr<-factor(melted_subtotals$brtr)
}else{
levels(melted_subtotals$Spectrum.File)<-rep_desc
}
if(ProteinQuantitation){
if(LabelFree){
pgroups<-as.data.frame(tapply(melted_subtotals$value,list(Protein.IDs=melted_subtotals$Protein.IDs,RawFile=melted_subtotals$brtr,LMHn=melted_subtotals$variable),function(x) sum(x,na.rm=T)))
}else{
pgroups<-as.data.frame(tapply(melted_subtotals$value,list(Protein.IDs=melted_subtotals$Protein.IDs,RawFile=melted_subtotals$Spectrum.File,LMHn=melted_subtotals$variable),function(x) sum(x,na.rm=T)))
}
}else{
pgroups<-as.data.frame(tapply(melted_subtotals$value,list(Peptide.IDs=paste(melted_subtotals$Sequence," [",melted_subtotals$Modifications.only,"]",sep=""),RawFile=melted_subtotals$Spectrum.File,LMHn=melted_subtotals$variable),function(x) sum(x,na.rm=T)))
}
for(cond_i in conditions.labels){
colnames(pgroups)[grep(paste("\\.",cond_i,"$",sep=""),colnames(pgroups))]<-sub(paste("(.*)\\.",cond_i,sep=""),paste("Intensity.",cond_i,".\\1",sep=""),colnames(pgroups)[grep(paste("\\.",cond_i,"$",sep=""),colnames(pgroups))])
}
pgroups[,paste(quantitated_items_lbl,".IDs",sep="")]<-row.names(pgroups)
#Collect peptide records for each protein
if(keepEvidenceIDs && ProteinQuantitation)
{
all_evidence_ids<-ddply(subtotals2,c("Protein.IDs"),function(x) data.frame(Evidence.IDs=paste(x$Evidence.IDs,collapse=";")))
pgroups<-merge(pgroups,all_evidence_ids,by=paste(quantitated_items_lbl,".IDs",sep=""),all.x=T)
}
if(ProteinQuantitation){
pgroups<-pgroups[,!(colnames(pgroups) %in% c("Protein.Descriptions"))]
}
pgroups$time.point<-time.point
if(!ProteinQuantitation){
subtotals2$Peptide.IDs<-paste(subtotals2$Sequence," [",subtotals2$Modifications.only,"]",sep="")
pgroups<-merge(pgroups,subtotals2[!duplicated(subtotals2$Peptide.IDs),c("Peptide.IDs","Protein.IDs")],by="Peptide.IDs",all.x=T)
# Remove peptides that we don't want to quantify (conditions.Mod is not empty means the user wants to do quantification on peptides with certain modifications only)
if(length(conditions.Mods)>0){
for(i in 1:length(conditions.Mods)){
for(mod_i_mods in conditions.Mods.Modifications[[i]]){
pgroups<-pgroups[grepl(mod_i_mods,pgroups$Peptide.IDs),]
}
}
}
#write.table(file="tmp.txt",merge(pgroups,subtotals2[!duplicated(subtotals2$Peptide.IDs),c("Peptide.IDs","Protein.IDs")],by="Peptide.IDs",all.x=T),row.names=F,sep="\t")
}
pgroups<-merge(pgroups,subtotals,by="Protein.IDs",all.x=T)
#If enabled, do filter out proteins based on percentage labeling for the desired label
if(ProteinQuantitation && filterL && !filterL_lvl){
levellog("Filter out proteins based on percentage labeling for the desited label ...");
fl<-paste(filterL_lbl,"p",sep="")
pgroups<-pgroups[pgroups[,c(fl)]<100,]
}
if(ProteinQuantitation){
cat(paste("read.pgroups_v2_PD: Quantifiable proteins: ",nrow(pgroups)," (",time.point,")\n",sep=""))
}else{
cat(paste("read.pgroups_v2_PD: Quantifiable peptides: ",nrow(pgroups)," (",time.point,")\n",sep=""))
}
row.names(pgroups)<-pgroups[,paste(quantitated_items_lbl,".IDs",sep="")]
levellog("",change=-1)
return(pgroups)
}
# VALIDATION HELP
# For MaxQuant only, for PD this can be done much better through its GUI
getValidationData<-function(pgroups_fname,diffexp_fname,evidence_fname,output_fname){
diffexp<-read.table(diffexp_fname, header = T, sep = "\t",quote='',stringsAsFactors=F,comment.char = "")
protein_groups<-read.table(pgroups_fname, header = T, sep = "\t",quote='',stringsAsFactors=F,comment.char = "")
evidence<-read.table(evidence_fname, header = T, sep = "\t",quote='',stringsAsFactors=F,comment.char = "")
colnames(diffexp)<-gsub("^X.","",colnames(diffexp))
colnames(diffexp)<-gsub(".$","",colnames(diffexp))
protein_groups$Protein.IDs<-paste(sub("^([^;]*).*","\\1",protein_groups$Protein.names)," [",sub("^([^;]*).*","\\1",protein_groups$Gene.names)," ...] [",sub("^([^;]*).*","\\1",protein_groups$Protein.IDs)," ...]",sep="")
protein_groups$Protein.IDs<-gsub("\"","",protein_groups$Protein.IDs)
diffexp$Protein.IDs<-gsub("\"","",diffexp$Protein.IDs)
protein_groups<-protein_groups[protein_groups$Protein.IDs %in% diffexp$Protein.IDs,]
diffexp_evidence<-as.data.frame(do.call(rbind,apply(protein_groups,1,function(x) cbind(x["Protein.IDs"],unlist(strsplit(x["Evidence.IDs"],";"))))),stringsAsFactors=F)
colnames(diffexp_evidence)<-c("Protein.IDs","Evidence.ID")
diffexp_evidence$Protein.IDs<-factor(diffexp_evidence$Protein.IDs)
diffexp_evidence$Evidence.ID<-as.numeric(diffexp_evidence$Evidence.ID)
evidence<-evidence[,c("id","Sequence","Labeling.State","Raw.file","MS.MS.Scan.Number","m.z","Charge","Mass.Error..ppm.","K.Count","R.Count")]
colnames(evidence)<-c("Evidence.ID","Sequence","Labeling.State","Raw.file","MS.MS.Scan.Number","m.z","Charge","Mass.Error.ppm.","K.Count","R.Count")
diffexp_evidence<-merge(diffexp_evidence,diffexp,by="Protein.IDs",all.x=T)
diffexp_evidence<-merge(diffexp_evidence,evidence,by="Evidence.ID",all.x=T)
write.table(diffexp_evidence,file=output_fname,sep="\t",row.names=F)
}
#getValidationData(pgroups_fname="QuaNCATrev_IV_4h_proteinGroups.txt",
#diffexp_fname="QuaNCAT-rev_IV_4h_HM-all-2reps_diffexp_4h.txt",
#evidence_fname="QuaNCATrev_IV_4h_evidence.txt",
#output_fname="QuaNCATrev_IV_4h_HM-all-2reps_diffexpevidence.txt")
# Again, for MaxQuant only
getProteinPeptideData_2reps_filter<-function(pgroups_fname,evidence_fname,output_fname,time.point, filterL=T,linkLimmaout=F,limma_outfname=""){
protein_groups<-read.pgroups_v2(pgroups_fname,time.point,filterL=filterL,evidence_fname=evidence_fname,keepEvidenceIDs=T)
protein_groups<-pgroups_filter_2reps_v2(protein_groups[protein_groups$time.point == time.point,])
evidence<-read.table(evidence_fname, header = T, sep = "\t",quote='',stringsAsFactors=F,comment.char = "")
peptide_evidence<-as.data.frame(do.call(rbind,apply(protein_groups,1,function(x) cbind(x["Protein.IDs"],unlist(strsplit(x["Evidence.IDs"],";"))))),stringsAsFactors=F)
colnames(peptide_evidence)<-c("Protein.IDs","Evidence.ID")
peptide_evidence$Protein.IDs<-factor(peptide_evidence$Protein.IDs)
peptide_evidence$Evidence.ID<-as.numeric(peptide_evidence$Evidence.ID)
evidence<-evidence[,c("id","Sequence","Labeling.State","Raw.file","MS.MS.Scan.Number","m.z","Charge","Mass.Error..ppm.","K.Count","R.Count","Protein.group.IDs")]
colnames(evidence)<-c("Evidence.ID","Sequence","Labeling.State","Raw.file","MS.MS.Scan.Number","m.z","Charge","Mass.Error.ppm.","K.Count","R.Count","Protein.group.IDs")
peptide_evidence<-merge(peptide_evidence,protein_groups[,!names(protein_groups) %in% c("Evidence.IDs")],by="Protein.IDs",all.x=T)
peptide_evidence<-merge(peptide_evidence,evidence,by="Evidence.ID",all.x=T)
if(linkLimmaout){
limmaout<-read.table(limma_outfname, header = T, sep = "\t",quote='',stringsAsFactors=F,comment.char = "")
peptide_evidence<-merge(peptide_evidence,limmaout,by="Protein.IDs",all.x=T)
}
write.table(peptide_evidence,file=output_fname,sep="\t",row.names=F)
}
#getProteinPeptideData_2reps_filter(
#"QuaNCATrev_IV_2h_proteinGroups.txt",
#"QuaNCATrev_IV_2h_evidence.txt",
#"QuaNCATrev_IV_2h_HM-all-2reps_evidence.txt",
#"2h",
#filterL=T,
#linkLimmaout=T,
#limma_outfname="QuaNCAT-rev_IV_2h_HM-all-2reps_limmaout_2h.txt")
#GLOBAL variables
duplicateCorrelation_trim<-0.15 # use 0.22 for "bad" datasets (too many missing values)
#
paramssetfromGUI<-F
getParamsViaGUI <- function(){
base <<- tktoplevel()
#tkwm.deiconify(base)
#tkgrab.set(base)
#tkfocus(base)
tkwm.title(base,'MS-based proteomics data differential expression analysis')
paramstkframe <- tkframe(base)
# create tcl variables to associate with the
# entry fields -- to include starting values
# replace the '' with the desired value
time.point_ <- tclVar('')
PDdata_ <- tclVar('0')
outputFigsPrefix_ <- tclVar('')
filterL_ <- tclVar('0')
filterL_lvl_ <- tclVar('1')
filterL_lbl_ <- tclVar(conditions.labels[1])
pgroups_fname_ <- tclVar('')
evidence_fname_ <- tclVar('')
mqValidation_ <- tclVar('0')
rep_order_ <- tclVar('')
techreps_ <- tclVar('3')
bioreps_ <- tclVar('3')
ProteinQuantitation_ <- tclVar('1')
tkLabelWidth<-40
tkLabelWidthFac<-0.85
tkLabelWidth2<-as.integer(tkLabelWidth*tkLabelWidthFac)
pgroupsentry<-tklabel(paramstkframe,anchor='w', width=tkLabelWidth,text='',relief='ridge')
tkgrid(tklabel(paramstkframe,anchor='w', text='Protein file',width=tkLabelWidth2),row=0,column=0)
tkgrid(pgroupsentry,row=0,column=1)
evidenceentry<-tklabel(paramstkframe,anchor='w', width=tkLabelWidth,text='',relief='ridge')
tkgrid(tklabel(paramstkframe,anchor='w', text='Peptide file',width=tkLabelWidth2),row=1,column=0)
tkgrid(evidenceentry,row=1,column=1)
tkgrid(tklabel(paramstkframe,anchor='w', text='Proteome Discoverer quantitation ?',width=tkLabelWidth2),row=2,column=0)
tkgrid(tkcheckbutton(paramstkframe,variable=PDdata_,command=function(...){
if(as.numeric(tclvalue(PDdata_))==1){
tkconfigure(validationlabel, state="disabled");
tkconfigure(validationcheck, state="disabled");
tkconfigure(bioorderlabel, state="normal");
tkconfigure(bioorderentry, state="normal");
tkconfigure(techrepslabel, state="normal");
tkconfigure(techrepsentry, state="normal");
tkconfigure(biorepslabel, state="normal");
tkconfigure(biorepsentry, state="normal");
}else{
tkconfigure(validationlabel, state="normal");
tkconfigure(validationcheck, state="normal");
tkconfigure(bioorderlabel, state="disabled");
tkconfigure(bioorderentry, state="disabled");
tkconfigure(techrepslabel, state="disabled");
tkconfigure(techrepsentry, state="disabled");
tkconfigure(biorepslabel, state="disabled");
tkconfigure(biorepsentry, state="disabled");
}
}),row=2,column=1)
tkgrid(tklabel(paramstkframe,anchor='w', text='Timepoint [text]',width=tkLabelWidth2),row=3,column=0)
tkgrid(tkentry(paramstkframe,width=tkLabelWidth,textvariable=time.point_),row=3,column=1)
tkgrid(tklabel(paramstkframe,anchor='w', text='Output figure file prefix [text]',width=tkLabelWidth2),row=4,column=0)
tkgrid(tkentry(paramstkframe,width=tkLabelWidth,textvariable=outputFigsPrefix_),row=4,column=1)
dslbqlbl<-tklabel(paramstkframe,anchor='w', text='Disregard single-label-based quantitation ?',width=tkLabelWidth2)
tkgrid(dslbqlbl,row=5,column=0)
dslbchk<-tkcheckbutton(paramstkframe,width=tkLabelWidth,variable=filterL_,command=function(...){
st<-"disabled"
if(as.numeric(tclvalue(filterL_))==1){
st<-"normal"
}
handles<-c(filterL_rb, filterL_rb_lbl, filterL_lvl_rb, filterL_lvl_rb_lbl)
for(h in handles){
tkconfigure(h, state=st)
}
})
tkgrid(dslbchk,row=5,column=1)
if(nConditions < 3){
tkconfigure(dslbqlbl, state="disabled");
tkconfigure(dslbchk, state="disabled");
}
filterL_lvl_rb<<-list()
filterL_lvl_rb_lbl<<-list()
rb<-tkradiobutton(paramstkframe)
tkconfigure(rb,variable=filterL_lvl_,value=0,state="disabled")
rb_lbl<-tklabel(paramstkframe,text="Sequence-based",state="disabled")
tkgrid(rb_lbl,row=6,column=1)
tkgrid(rb,row=6,column=2)
filterL_lvl_rb[[length(filterL_lvl_rb)+1]]<<-rb
filterL_lvl_rb_lbl[[length(filterL_lvl_rb_lbl)+1]]<<-rb_lbl
rb<-tkradiobutton(paramstkframe)
tkconfigure(rb,variable=filterL_lvl_,value=1,state="disabled")
rb_lbl<-tklabel(paramstkframe,text="Intensity-based",state="disabled")
tkgrid(rb_lbl,row=7,column=1)
tkgrid(rb,row=7,column=2)
filterL_lvl_rb[[length(filterL_lvl_rb)+1]]<<-rb
filterL_lvl_rb_lbl[[length(filterL_lvl_rb_lbl)+1]]<<-rb_lbl
tmp_row<-8
filterL_rb<<-list()
filterL_rb_lbl<<-list()
for(cond_i in conditions.labels){
rb<-tkradiobutton(paramstkframe)
tkconfigure(rb,variable=filterL_lbl_,value=cond_i,state="disabled")
rb_lbl<-tklabel(paramstkframe,text=cond_i,state="disabled")
tkgrid(rb_lbl,row=tmp_row,column=1)
tkgrid(rb,row=tmp_row,column=2)
filterL_rb[[length(filterL_rb)+1]]<<-rb
filterL_rb_lbl[[length(filterL_rb_lbl)+1]]<<-rb_lbl
tmp_row<-tmp_row+1
}
tkgrid(tklabel(paramstkframe,anchor='w', text='Timepoint [text]',width=tkLabelWidth2),row=tmp_row,column=0)
tkgrid(tkentry(paramstkframe,width=tkLabelWidth,textvariable=time.point_),row=tmp_row,column=1)
tmp_row<-tmp_row+1
tkgrid(tklabel(paramstkframe,anchor='w', text='Output figure file prefix [text]',width=tkLabelWidth2),row=tmp_row,column=0)
tkgrid(tkentry(paramstkframe,width=tkLabelWidth,textvariable=outputFigsPrefix_),row=tmp_row,column=1)
tmp_row<-tmp_row+1
validationlabel<<-tklabel(paramstkframe,anchor='w', text='Generate validation data ? (MQ)',width=tkLabelWidth2)
validationcheck<<-tkcheckbutton(paramstkframe,width=tkLabelWidth,variable=mqValidation_)
tkgrid(validationlabel,row=tmp_row,column=0)
tkgrid(validationcheck,row=tmp_row,column=1)
tmp_row<-tmp_row+1
biorepslabel<<-tklabel(paramstkframe,anchor='w', text='Samples (replicates) [number]',width=tkLabelWidth2,state='disabled')
biorepsentry<<-tkentry(paramstkframe,width=tkLabelWidth,textvariable=bioreps_,state='disabled')
tkgrid(biorepslabel,row=tmp_row,column=0)
tkgrid(biorepsentry,row=tmp_row,column=1)
tmp_row<-tmp_row+1
bioorderlabel<<-tklabel(paramstkframe,anchor='w', text='Acquisition order [space-separated numbers]',width=tkLabelWidth2,state='disabled')
bioorderentry<<-tkentry(paramstkframe,width=tkLabelWidth,textvariable=rep_order_,state='disabled')
tkgrid(bioorderlabel,row=tmp_row,column=0)
tkgrid(bioorderentry,row=tmp_row,column=1)
tmp_row<-tmp_row+1
techrepslabel<<-tklabel(paramstkframe,anchor='w', text='LC-MS/MS runs per sample [number]',width=tkLabelWidth2,state='disabled')
techrepsentry<<-tkentry(paramstkframe,width=tkLabelWidth,textvariable=techreps_,state='disabled')
tkgrid(techrepslabel,row=tmp_row,column=0)
tkgrid(techrepsentry,row=tmp_row,column=1)
tmp_row<-tmp_row+1
tkgrid(tklabel(paramstkframe,anchor='w', text='Protein quantitation ?',width=tkLabelWidth2),row=tmp_row,column=0)
tkgrid(tkcheckbutton(paramstkframe,variable=ProteinQuantitation_),row=tmp_row,column=1)
tmp_row<-tmp_row+1
tkbind(pgroupsentry,'<Button-1>',function(...){
chosenfile<-tk_choose.files(multi=F, caption = "Select protein file", filter=matrix(c("Text", ".txt"), 1, 2, byrow = TRUE));
if(length(chosenfile)>0){
working_directory<<-dirname(chosenfile);
setwd(working_directory);
chosenfile<-basename(chosenfile);
tkconfigure(pgroupsentry,text=chosenfile);
tclvalue(pgroups_fname_)<-chosenfile;
tkraise(base);
}
})
tkbind(evidenceentry,'<Button-1>',function(...){
chosenfile<-tk_choose.files(multi=F, caption = "Select peptide file", filter=matrix(c("Text", ".txt"), 1, 2, byrow = TRUE));
if(length(chosenfile)>0){
working_directory<<-dirname(chosenfile);
setwd(working_directory);
chosenfile<-basename(chosenfile);
tkconfigure(evidenceentry,text=chosenfile);
tclvalue(evidence_fname_)<-chosenfile;
tkraise(base);
}
})
tkpack(paramstkframe,side='top', pady=c(10,10))
controlbtnstkframe = tkframe(base)
tkgrid(tkbutton(controlbtnstkframe,text='Apply & Run',command=function(...){
time.point <<- tclvalue(time.point_);
PDdata <<- as.numeric(tclvalue(PDdata_))==1;
ProteinQuantitation <<- as.numeric(tclvalue(ProteinQuantitation_))==1;
if(ProteinQuantitation){
quantitated_items_lbl<<-"Protein"
}else{
quantitated_items_lbl<<-"Peptide"
}
outputFigsPrefix <<- tclvalue(outputFigsPrefix_);
filterL <<- as.numeric(tclvalue(filterL_))==1;
filterL_lvl <<- as.numeric(tclvalue(filterL_lvl_))==1;
filterL_lbl <<- as.character(tclvalue(filterL_lbl_));
pgroups_fname <<- tclvalue(pgroups_fname_);
evidence_fname <<- tclvalue(evidence_fname_);
mqValidation <<- as.numeric(tclvalue(mqValidation_))==1;
rep_order <<- as.numeric(unlist(strsplit(tclvalue(rep_order_)," ")));
techreps <<- as.numeric(unlist(strsplit(tclvalue(techreps_)," ")));
bioreps <<- as.numeric(unlist(strsplit(tclvalue(bioreps_)," ")));
if(length(rep_order) == 0){
rep_order<<-NA
}
if(length(techreps_) == 0){
techreps<<-3
}
if(length(bioreps_) == 0){
bioreps<<-3
}
paramssetfromGUI <<- T;
tkgrab.release(base); tkdestroy(base)
}),tkbutton(controlbtnstkframe,text='Cancel',command=function(...){
tkgrab.release(base); tkdestroy(base)
}))
tkpack(controlbtnstkframe,side='bottom', pady=c(10,10))
#handles<<-c(validationlabel, validationcheck, bioorderlabel, bioorderentry, techrepslabel, techrepsentry, biorepslabel, biorepsentry, filterL_rb, filterL_rb_lbl, filterL_lvl_rb, filterL_lvl_rb_lbl)
#for(h in handles){
#  print(h)
#  tkconfigure(h, state="disabled")
#}
#tkraise(base)
tkwait.window(base)
}
addLabel<-function(lblname, lbl.Modifications){
#If label name is a number some routines won't work, it has to be converted to some acceptable variable name
lblname<-make.names(lblname)
labeltxt <- "label";
if(!LabelFree){
lbl.Modifications<-gsub("\\(","\\\\(",lbl.Modifications)
lbl.Modifications<-gsub("\\)","\\\\)",lbl.Modifications)
unmod_idx<-which(lbl.Modifications == "")
if(length(unmod_idx) > 0){
rest_idx<-which(lbl.Modifications[-unmod_idx] != "")
if(length(rest_idx) > 0){
lbl.Modifications<-c(lbl.Modifications[unmod_idx],paste(lbl.Modifications[-unmod_idx],"\\)",sep=""))
lbl.Modifications<-c(lbl.Modifications[unmod_idx],paste("Label:",lbl.Modifications[-unmod_idx],sep=""))
}
}else{
lbl.Modifications<-paste(lbl.Modifications,"\\)",sep="")
lbl.Modifications<-paste("Label:",lbl.Modifications,sep="")
}
}else{
labeltxt <- "condition";
}
lblname_i<-which(grepl(paste("^",lblname,"$",sep=""),conditions.labels))
if(length(lblname_i) != 0){
cat(paste("addLabel: Error adding ",labeltxt," '",lblname,"': An existing ",labeltxt," with name '",lblname,"' (specification: ",paste(unlist(conditions.labels.Modifications[lblname_i]),collapse=", "),") already exists. Please try a different name.",sep=""))
return(FALSE)
}
#   i<-1
#   for(lbl_i in conditions.labels.Modifications){
#     for(mod_i in lbl.Modifications){
#       lbl_i_matches<-which(grepl(paste("^",mod_i,"$",sep=""),lbl_i))
#       if(length(lbl_i_matches) != 0){
#         cat(paste("addLabel: Error adding label '",lblname,"': Existing label with name '",conditions.labels[i],"' has an identical modification (",mod_i,").",sep=""))
#         return(FALSE)
#       }
#     }
#     i<-i+1
#   }
conditions.labels<<-c(conditions.labels, lblname)
j<-length(conditions.labels.Modifications)+1
conditions.labels.Modifications[[j]]<<-lbl.Modifications
nConditions<<-length(conditions.labels)
}
removeLabel<-function(lblname){
lblname_i<-which(grepl(paste("^",lblname,"$",sep=""),conditions.labels))
if(length(lblname_i) != 0){
conditions.labels<<-conditions.labels[-lblname_i]
conditions.labels.Modifications<<-conditions.labels.Modifications[-lblname_i]
}
nConditions<<-length(conditions.labels)
}
clearLabels<-function(){
conditions.labels<<-c()
conditions.labels.Modifications<<-list()
nConditions<<-length(conditions.labels)
}
addMod<-function(modname, mod.Modifications){
modname<-make.names(modname)
mod.Modifications<-gsub("\\(","\\\\(",mod.Modifications)
mod.Modifications<-gsub("\\)","\\\\)",mod.Modifications)
unmod_idx<-which(mod.Modifications == "")
if(length(unmod_idx) > 0){
rest_idx<-which(mod.Modifications[-unmod_idx] != "")
if(length(rest_idx) > 0){
mod.Modifications<-c(mod.Modifications[unmod_idx],paste(mod.Modifications[-unmod_idx],"\\)",sep=""))
}
}else{
mod.Modifications<-paste(mod.Modifications,"\\)",sep="")
}
modname_i<-which(grepl(paste("^",modname,"$",sep=""),conditions.Mods))
if(length(modname_i) != 0){
cat(paste("addMod: Error adding modification '",modname,"': An existing modification with name '",modname,"' (specification: ",paste(unlist(conditions.Mods.Modifications[modname_i]),collapse=", "),") already exists. Please try a different name.",sep=""))
return(FALSE)
}
i<-1
for(mod_i in conditions.Mods.Modifications){
for(mod_i in mod.Modifications){
mod_i_matches<-which(grepl(paste("^",mod_i,"$",sep=""),mod_i))
if(length(mod_i_matches) != 0){
cat(paste("addMod: Error adding modification '",modname,"': Existing modification with name '",conditions.Mods[i],"' has an identical specification (",mod_i,").",sep=""))
return(FALSE)
}
}
i<-i+1
}
conditions.Mods<<-c(conditions.Mods, modname)
j<-length(conditions.Mods.Modifications)+1
conditions.Mods.Modifications[[j]]<<-mod.Modifications
nMods<<-length(conditions.Mods)
}
removeMod<-function(modname){
modname_i<-which(grepl(paste("^",modname,"$",sep=""),conditions.Mods))
if(length(modname_i) != 0){
conditions.Mods<<-conditions.Mods[-modname_i]
conditions.Mods.Modifications<<-conditions.Mods.Modifications[-modname_i]
}
nMods<<-length(conditions.Mods)
}
clearMods<-function(){
conditions.Mods<<-c()
conditions.Mods.Modifications<<-list()
nMods<<-length(conditions.Mods)
}
unlabeled_peptide_regex<-"^Label:$"
clearLabels()
clearMods()
paramssetfromGUI<-F
working_directory<-getwd()
limma_output<-"msdiffexp_out"
LabelFree<-F
source("MSdiffexp_definitions.R")
rep_structure<<-rep(1:(bioreps*nConditions),each=techreps)
if(ProteinQuantitation){
quantitated_items_lbl<<-"Protein"
}else{
quantitated_items_lbl<<-"Peptide"
}
if(!file.exists(limma_output)){dir.create(limma_output)}
protein_groups<<-read.pgroups_v2_PD(pgroups_fname,evidence_fname,time.point,rep_structure,keepEvidenceIDs=T,rep_order=rep_order)
do_generate_Venn3_data_quant_filter_2reps_PD(protein_groups,time.point,evidence_fname,rep_structure,outputFigsPrefix=outputFigsPrefix,rep_order=rep_order)
setwd(limma_output)
write.table(protein_groups,file=paste(outputFigsPrefix,"_proteinGroupsDF.txt",sep=""),row.names=F,sep="\t")
setwd("..")
expdesign<-c()
for(cond_i in conditions.labels){
expdesign<-rbind(expdesign,cbind(paste(sub("Intensity\\.","",sort(colnames(protein_groups)[grep(paste("Intensity.",cond_i,".b",sep=""),colnames(protein_groups))]))),cond_i))
}
colnames(expdesign)<-c("Sample","Category")
write.table(expdesign,file="curr_exp_design.txt",row.names=F,quote=F,sep = "\t")
exp_design_fname<<-"curr_exp_design.txt"
levellog("Performing the analysis ...")
results<-do_analyse_all_2reps_v2(protein_groups,time.point,exp_design_fname,rep_structure,exportFormat="pdf",outputFigsPrefix=outputFigsPrefix)
levellog("Data analysis finished.")
filterL_lvl<-T
filterL<-T
protein_groups<<-read.pgroups_v2_PD(pgroups_fname,evidence_fname,time.point,rep_structure,keepEvidenceIDs=T,rep_order=rep_order)
do_generate_Venn3_data_quant_filter_2reps_PD(protein_groups,time.point,evidence_fname,rep_structure,outputFigsPrefix=outputFigsPrefix,rep_order=rep_order)
setwd(limma_output)
write.table(protein_groups,file=paste(outputFigsPrefix,"_proteinGroupsDF.txt",sep=""),row.names=F,sep="\t")
setwd("..")
expdesign<-c()
for(cond_i in conditions.labels){
expdesign<-rbind(expdesign,cbind(paste(sub("Intensity\\.","",sort(colnames(protein_groups)[grep(paste("Intensity.",cond_i,".b",sep=""),colnames(protein_groups))]))),cond_i))
}
colnames(expdesign)<-c("Sample","Category")
write.table(expdesign,file="curr_exp_design.txt",row.names=F,quote=F,sep = "\t")
exp_design_fname<<-"curr_exp_design.txt"
levellog("Performing the analysis ...")
results<-do_analyse_all_2reps_v2(protein_groups,time.point,exp_design_fname,rep_structure,exportFormat="pdf",outputFigsPrefix=outputFigsPrefix)
levellog("Data analysis finished.")
rep_order<-c(2,1,3)
